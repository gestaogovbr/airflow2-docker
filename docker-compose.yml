# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME         - Docker image name used to run Airflow.
#                              Default: apache/airflow:master-python3.8
# AIRFLOW_UID                - User ID in Airflow containers
#                              Default: 50000
# AIRFLOW_GID                - Group ID in Airflow containers
#                              Default: 50000
# _AIRFLOW_WWW_USER_USERNAME - Username for the administrator account.
#                              Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD - Password for the administrator account.
#                              Default: airflow
#
# Feel free to modify this file to suit your needs.
---
    version: '3'
    x-airflow-common:
      &airflow-common
      build:
        context: .
        args:
          dev_build: "true"
      environment:
        &airflow-common-env
        AIRFLOW__CORE__EXECUTOR: LocalExecutor
        AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
        AIRFLOW__CORE__ENABLE_XCOM_PICKLING: 'true'
        AIRFLOW__CORE__FERNET_KEY: 'Uqv6pwYWJn7xifR3QAkifMTkupos8mkxaQL2Q7Ydsqw='
        AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
        AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
        AIRFLOW__CORE__DEFAULT_TIMEZONE: 'America/Sao_Paulo'
        AIRFLOW__WEBSERVER__DEFAULT_UI_TIMEZONE: 'America/Sao_Paulo'
        AIRFLOW__EMAIL__DEFAULT_EMAIL_ON_RETRY: 'false'
        AIRFLOW__EMAIL__DEFAULT_EMAIL_ON_FAILURE: 'false'
        AIRFLOW__WEBSERVER__SECRET_KEY: '42'
        AIRFLOW__WEBSERVER__WORKERS: 1
        PYTHONPATH: '/opt/airflow/dags/airflow-dags:/opt/airflow/dags/airflow-dags-detru:/opt/airflow/dags/airflow-dags-delog'
        RO_DOU__DAG_CONF_DIR: /opt/airflow/dags/airflow-dags/ro_dou/dag_confs
        FASTETL_DEV: "true"
      volumes:
        - ../airflow-dags/dags:/opt/airflow/dags/airflow-dags
        - ../airflow-dags-delog/dags:/opt/airflow/dags/airflow-dags-delog
        - ../airflow-dags-detru/dags:/opt/airflow/dags/airflow-dags-detru
        - ../FastETL/fastetl:/opt/airflow/plugins/fastetl
        - ../airflow_commons:/opt/airflow/plugins/airflow_commons
        - ../Ro-dou/src:/opt/airflow/dags/ro_dou_src
        - ../airflow-great-expectations:/opt/airflow/include/great_expectations

      user: "50000:0"
      depends_on:
        postgres:
          condition: service_healthy

    services:
      postgres:
        image: postgres:13
        environment:
          POSTGRES_USER: airflow
          POSTGRES_PASSWORD: airflow
          POSTGRES_DB: airflow
        volumes:
          - ./mnt/pgdata:/var/lib/postgresql/data
        healthcheck:
          test: ["CMD", "pg_isready", "-U", "airflow"]
          interval: 5s
          retries: 5
        restart: always

      airflow-webserver:
        <<: *airflow-common
        command: webserver
        ports:
          - 8080:8080
        healthcheck:
          test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
          interval: 10s
          timeout: 10s
          retries: 5
        restart: always

      airflow-scheduler:
        <<: *airflow-common
        command: scheduler
        restart: always

      jupyter:
        <<: *airflow-common
        command: bash -c "jupyter notebook --port=8888 --no-browser --ip=0.0.0.0 --notebook-dir=/opt/airflow/include/great_expectations --NotebookApp.token=''"
        ports:
          - 8888:8888

      # nginx:
      #   image: nginx:alpine
      #   volumes:
      #     - ../airflow-great-expectations/uncommitted/data_docs/local_site:/usr/share/nginx/html
      #   ports:
      #     - 80:80

      # airflow-db-upgrade:
      #   <<: *airflow-common
      #   command: db upgrade